# : <<EOF

#########################################################################
##      _____ __  __ _   ___  __      ____             __ _            ##
##     |_   _|  \/  | | | \ \/ /     / ___|___  _ __  / _(_) ____      ##
##       | | | |\/| | | | |\  /     | |   / _ \| '_ \| |_| |/ _  |     ## 
##       | | | |  | | |_| |/  \     | |__| (_) | | | |  _| | (_| |     ##
##       |_| |_|  |_|\___//_/\_\     \____\___/|_| |_|_| |_|\__, |     ##
##                                                          |___/      ##  
##                                                                     ##
#########################################################################

# Colors

color_background="colour236" # grayish 
color_background_light="colour238" # lightergray
color_background_alt="colour232" # blackish
color_primary="colour1" # red
color_secondary="colour9" # brightred
color_text="colour15" # white
color_text_highlight="colour6" # cyanis

# Keybinds
# --------

# C = Ctrl
# M = Meta -> Alt

# Make C+Space the tmux prefix
unbind "C-Space"
set -g prefix "C-Space"
bind-key "C-Space" send-prefix

# Splitting which makes more sense IMO
unbind '"'
bind-key "|" split-window -h -c "#{pane_current_path}"
bind-key "\\" split-window -fh -c "#{pane_current_path}"

unbind '%'
bind-key "-" split-window -v -c "#{pane_current_path}"
bind-key "_" split-window -fv -c "#{pane_current_path}"

# Reload configuration
bind-key "R" source-file ~/.tmux.conf \; display '~/.tmux.conf reloaded.'

# Popup shell scratchpad
bind-key "C-g" display-popup -w "70%" -h "70%" "exec $SHELL"

# Popup kube
bind-key "C-k" display-popup -w "70%" -h "70%" "exec $SHELL -c 'kubectx'"

# Kill current pane
bind-key "x" kill-pane\; refresh-client -S

# Syncronize panes
bind-key "S" set-window-option synchronize-panes
unbind "s" # Unbind s which is used by default for "Select a new session for the attached client interactively" because it gets in the way of my sync keybind

# Switch to last used window
bind-key "Tab" last-window

# Window movement
bind-key "1" select-window -t:1\; refresh-client -S
bind-key "2" select-window -t:2\; refresh-client -S
bind-key "3" select-window -t:3\; refresh-client -S
bind-key "4" select-window -t:4\; refresh-client -S
bind-key "5" select-window -t:5\; refresh-client -S
bind-key "6" select-window -t:6\; refresh-client -S
bind-key "7" select-window -t:7\; refresh-client -S
bind-key "8" select-window -t:8\; refresh-client -S
bind-key "9" select-window -t:9\; refresh-client -S

# Pane movement.
bind-key "h" select-pane -L\; refresh-client -S
bind-key "j" select-pane -D\; refresh-client -S
bind-key "k" select-pane -U\; refresh-client -S
bind-key "l" select-pane -R\; refresh-client -S

# Pane resizing.
bind-key -r "H" resize-pane -L 5
bind-key -r "J" resize-pane -D 5
bind-key -r "K" resize-pane -U 5
bind-key -r "L" resize-pane -R 5

# Keymaps
# -------

# Toogle Keymap to work in nested remote tmux session
bind -T root "C-F12" \
    set prefix None \;\
    set key-table off \;\
    set status-style "bg=${color_background_light}" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    run-shell 'tmux set-environment -g tmux_keytable \
        $(if [ "$(tmux show-option -qv key-table)" = "off" ]; \
        then echo 1; else echo 0; fi)' \;\
    refresh-client -S \;\

bind -T off "C-F12" \
    set -u prefix \;\
    set -u key-table \;\
    set status-style "bg=${color_background}" \;\
    run-shell 'tmux set-environment -g tmux_keytable \
        $(if [ "$(tmux show-option -qv key-table)" = "off" ]; \
        then echo 1; else echo 0; fi)' \;\
    refresh-client -S \;\

# General config
# --------------

# Start window numbering at 1
set -g base-index 1     

# Make pane numbering consistent with window
setw -g pane-base-index 1

# Rename window to reflect current program
setw -g automatic-rename off

 # Renumber windows when a window is closed 
set -g renumber-windows on   

# Set terminal title
set -g set-titles on          

# Increase pane indicators display time
set -g display-panes-time 1000 

# Increase status messages display time
set -g display-time 1000     

# Refresh status line every second
set -g status-interval 1 

# Silence everything
set -g bell-action none
set -g monitor-activity off
set -g visual-activity off
set -g monitor-silence 0
set -g visual-silence off

# New window with and without keeping current directory
bind c new-window
bind C new-window -c "#{pane_current_path}"

# Enable mouse
set -g mouse on

# Increase history
set-option -g history-limit 50000

# Faster key repetition
set -s escape-time 50

set -g set-clipboard on

# Styles and custom status bar
# -----------------

# Colors!!!
set -g default-terminal "xterm-256color"

# Symbols
#  - nf-pl-right_hard_divider
#  - nf-pl-left_hard_divider
#  - nf-pl-right_soft_divider
#  - nf-pl-left_soft_divider
#  - nf-ple-lower_right_triangle
#  - nf-ple-upper_right_triangle
#  - nf-ple-lower_left_triangle
#  - nf-ple-upper_left_triangle
#  - nf-ple-left_half_circle_thick
#  - nf-ple-right_half_circle_thick
#  - nf-ple-left_half_circle_thin
#  - nf-ple-right_half_circle_thin
#  - nf-ple-flame_thick_mirrored
#  - nf-ple-flame_thick
#  - nf-ple-ice_waveform_mirrored
#  - nf-ple-ice_waveform
#  - nf-ple-trapezoid_top_bottom_mirrored
#  - nf-ple-trapezoid_top_bottom

# │ ─
# ╭ ╮
# ╰ ╯
# ┃ ━
# ﬦ - nf-mdi-lambda

# Custom theme

reset="#[fg=default bg=default]"

left_div_wide=""   # ${left_div_wide}
right_div_wide=""  # ${right_div_wide}
left_rdiv_wide=""   # ${left_rdiv_wide}
right_rdiv_wide=""  # ${right_rdiv_wide}
left_div_thin=""   # ${left_div_thin}
right_div_thin=""  # ${right_div_thin}
left_rdiv_thin=""   # ${left_rdiv_thin}
right_rdiv_thin=""  # ${right_rdiv_thin}

status_space="#[fg=${window_active_color}]━" # ${status_space}

# Pane border
# -----------

# Pane border user config
pane_border_show_path="0"

# Pane border config
set -g pane-border-status top
set -g pane-border-style fg=${color_primary}
set -g pane-active-border-style fg=${color_primary}

if-shell -b '[ "$(echo "$TMUX_VERSION)" = "3.2a" ]' {
    set -g pane-border-lines heavy # not working with 3.0a -> invalid option: pane-border-lines
}

show_pane_border_title="#{!=:#{window_panes},1}"

# Active pane segments
pane_active_left_fmt="#[bg=default fg=${color_primary}]${left_rdiv_wide}"
pane_active_right_fmt="#[bg=default fg=${color_primary}]${right_rdiv_wide}"
pane_active_mid_fmt="#[bg=${color_primary} fg=${color_text}] #{pane_index} \
#[bg=${color_primary} fg=${color_text}]${right_div_thin}\
#[bg=${color_primary} fg=${color_text}] #{pane_current_command} "

pane_active_fmt="${pane_active_left_fmt}${pane_active_mid_fmt}${pane_active_right_fmt}"

# Inactive pane segments
pane_inactive_left_fmt="#[bg=default fg=${color_primary}]${left_rdiv_thin}"
pane_inactive_right_fmt="#[bg=default fg=${color_primary}]${right_rdiv_thin}"
pane_inactive_mid_fmt="#[bg=default fg=${color_text}] #{pane_index}\
#[bg=default fg=${color_primary}] ${right_div_thin}\
#[bg=default fg=${color_text}] #{pane_current_command} "

pane_inactive_fmt="${pane_inactive_left_fmt}${pane_inactive_mid_fmt}${pane_inactive_right_fmt}"

# Optional path in pane border
pane_active_path="${pane_active_left_fmt}#[bg=${color_primary} fg=white]#{pane_current_path}${pane_active_right_fmt}"
pane_inactive_path="${pane_inactive_left_fmt}#[fg=${color_primary}]#{pane_current_path}${pane_inactive_right_fmt}"

# Pane border
pane_border_title_fmt="#{?pane_active,\
${pane_active_fmt}\
#{?pane_border_show_path,${status_space}${pane_active_path},}\
,\
${pane_inactive_fmt}\
#{?pane_border_show_path,${status_space}${pane_inactive_path},}\
}"

# Only show pane border title when there is more than 1 pane
set -g pane-border-format "#{?${show_pane_border_title},${pane_border_title_fmt},}"

# Status style
# ------------

set -g status-style bg=${color_background},fg=${color_primary}
set -g status-left-length 100
set -g status-right-length 250

# Status left style
# -----------------

# Session name
# session_format="#{session_name}#{?client_prefix, גּ,}#{?window_zoomed_flag, ,}"
# session_format="#{session_name}#{?client_prefix, גּ,}"
session_format="#{session_name}"

set -g status-left "\
${reset}\
#[bg=${color_primary} fg=#{color_text}]#{?#(echo $SSH_CLIENT), SSH ,} \
#[bg=${color_primary} fg=${color_text}]${session_format} \
#[bg=default fg=#{color_primary}]${right_div_wide}"

# Adding a space between the left status and the window list
set -ag status-left " "

# Window status style
# -------------------
window_text_color=${color_text}
window_active_color=${color_primary}
window_inactive_color=${color_background_alt}
window_flags="#{?window_zoomed_flag, ,#{window_flags}}"

# Active window
window_name_separator_active="#[fg=${color_text}]${right_div_thin}#[fg=${color_text}]"

window_name_format_active=" #{window_index} \
${window_name_separator_active} \
#{window_name}${window_flags} "

set -g window-status-current-format "\
${reset}\
#[fg=${window_active_color}]${left_rdiv_wide}\
#[bg=${window_active_color} fg=${window_text_color}]${window_name_format_active}\
#[bg=default fg=${window_active_color}]${right_rdiv_wide}"

# Inactive window
window_name_separator_inactive="#[fg=${window_active_color}]${right_div_thin}#[fg=${color_text}]"

window_name_format_inactive=" #{window_index} \
${window_name_separator_inactive} \
#{window_name}${window_flags} "

set -g window-status-format "\
${reset}\
#[fg=${window_active_color}]${left_rdiv_thin}\
#[fg=${window_text_color}]${window_name_format_inactive}\
#[bg=default fg=${window_active_color}]${right_rdiv_thin}"

# Sets the separator drawn between windows in the status line.
set -g window-status-separator "${status_space}" 

set -g status-justify left
# set -g status-justify absolute-centre

# %if "#{>=:#{window_width},150}"
#     set -g status-justify absolute-centre
# %else
#     set -g status-justify left
# %endif

# set-hook -g client-resized 'if -F "#{>=:#{window_width},150}" \
# "set -g status-justify absolute-centre" \
# "set -g status-justify left"'

# Status right style
# ------------------

sync_on_text="SYNC ON"
remote_enabled_text="REMOTE"
date_string="%a %d.%m.%Y %H:%M"
user_host="#(whoami | awk '{print tolower($0)}')@#(hostname | awk '{print tolower($0)}')"

interface="eth0"
ip_address="#(ip addr show ${interface} | grep -m 1 inet | awk '{print $2}' | cut -d / -f 1)"

set-option -g status-right "\
#[bg=default fg=${color_primary}]#{?pane_synchronized,${left_div_thin} ${sync_on_text} ,}\
#[bg=default fg=${color_primary}]#{?tmux_keytable,${left_div_thin} ${remote_enabled_text} ,}\
#[bg=default fg=${color_primary}]${left_div_thin} ${interface}: ${ip_address} \
#[bg=default fg=${color_primary}]${left_div_thin} ${date_string} \
#[bg=default fg=${color_primary}]${left_div_wide}\
#[bg=${color_primary} fg=${color_text}] ${user_host} "

# set -ag status-right "#{window_width} "

# Sync mode indicator bubble
# panes_in_sync=" ${reset}#[fg=${color_primary} bg=${color_background}]${left_rdiv_wide}#[fg=${color_background} bg=${color_primary}] ${sync_on_text} #[fg=${color_primary} bg=${color_background}]${right_rdiv_wide}${reset}"
# set -ag status-right "#{?pane_synchronized,${panes_in_sync},}"

# Local config
# ------------

# Load local overrides
source-file -q ~/.tmux.conf.local

# Remote config
# -------------

# Set indicator for keymap
run-shell 'tmux set-environment -g tmux_keytable \
    $(if [ "$(tmux show-option -qv key-table)" = "off" ]; \
    then echo 1; else echo 0; fi)'

# Load remote overrides
if-shell "test -n '$SSH_CLIENT'" "source-file -q ~/.tmux.conf.remote"

# Functions
# ---------

# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# #
# # Template function for new function containing override mechanism.
# #
# #_template_function() {
# #    if ! type _template_function_override > /dev/null 2>&1; then
# #        # Insert all function code here.
# #        echo 'Awesome template function.'
# #    else
# #        _template_function_override
# #    fi
# #}
#
# eval "$(cut -c3- ~/.tmux.conf.local)"
# _read_function_overrides() {
#     eval "$(cut -c3- ~/.tmux.conf.local)"
# }
#
# _is_ssh() {
#     cmdline="${1}"
#     if ! type _is_ssh_override > /dev/null 2>&1; then
#         if [ -z "${cmdline##*ssh *}" ]; then
#             return 0
#         else
#             return 1
#         fi
#     else
#         _is_ssh_override
#     fi
# }
#
# _ssh_stats() {
#     cmdline="${1}"
#     if ! type _ssh_stats_override > /dev/null 2>&1; then
#         ssh_args="${cmdline#ssh }"
#         user_host="$(\
#             # shellcheck disable=SC2086
#             ssh -G ${ssh_args} |\
#             awk '(/^user /) {
#                 user=$2
#             }
#             (/^hostname /) {
#                 hostname=$2
#             } END {
#                 print user":"hostname
#                 exit
#             }
#         ')"
#         printf '%s' "${user_host}"
#     else
#         _ssh_stats_override
#     fi
# }
#
# _tty_stats() {
#     tty=${1:-$(tmux display -p '#{pane_tty}')}
#     if ! type _tty_stats_override > /dev/null 2>&1; then
#         ps -t "${tty}" -o user=WIDEOUTPUTFORLONGNAME -o pid= -o ppid= -o command= | awk '
#             NR > 1 && ((/ssh/ && !/-W/) || !/ssh/) {
#                 users[$2] = $1; parents[$2] = $3; children[$3] = $2; pid=$2; $1 = $2 = $3 = ""; commands[pid] = substr($0,4)
#             } END {
#                 for (ppid in parents) {
#                     pid = ppid
#                     while (parents[pid])
#                     pid = parents[pid]
#
#                     if (!(ppid in children) && pid != 1) {
#                         print ppid":"users[ppid]":"commands[ppid]
#                         exit
#                     }
#                 }
#             }
#         '
#     else
#         _tty_stats_override
#     fi
# }
#
# _username() {
#     tty=${1:-$(tmux display -p '#{pane_tty}')}
#     if ! type _username_override > /dev/null 2>&1; then
#         tty_stats="$(_tty_stats "${tty}")"
#         username="${tty_stats#*:}"
#         cmdline="${username#*:}"
#         username="${username%%:*}"
#         if _is_ssh "${cmdline}";then
#             ssh_stats="$(_ssh_stats "${cmdline}")"
#             printf '%s' "${ssh_stats%%:*}"
#         else
#             if [ "${username}" = "caffeinate" ];then
#                 username="$(hostname)"
#             fi
#             printf '%s' "${username}"
#         fi
#     else
#         _username_override "${tty}"
#     fi
#     if [ "${username}" = "root" ]; then
#         tmux set-environment -g tmux_user_root 'root'
#     else
#         tmux set-environment -g tmux_user_root ''
#     fi
# }
#
# _hostname() {
#     tty=${1:-$(tmux display -p '#{pane_tty}')}
#     if ! type _hostname_override > /dev/null 2>&1; then
#         tty_stats="$(_tty_stats "${tty}")"
#         cmdline="${tty_stats#*:}"
#         cmdline="${cmdline#*:}"
#         if _is_ssh "${cmdline}";then
#             ssh_stats="$(_ssh_stats "${cmdline}")"
#             printf '%s' "${ssh_stats##*:}"
#         else
#             printf '%s' "$(uname -n)"
#         fi
#     else
#         _hostname_override "${tty}"
#     fi
# }
# 
# _network_stats() {
#     if ! type _network_stats_override > /dev/null 2>&1; then
#         interfaces="$(\
#             find /sys/class/net/ -type l \
#             | rev \
#             | cut -d '/' -f 1 \
#             | rev \
#             )"
#         output='No network!'
#         wifi_icon=''
#         ethernet_icon=''
#         for interface in ${interfaces}; do
#             if ! ip link show "${interface}" | grep -q DOWN; then
#                 interface_path="/sys/class/net/${interface}"
#                 devtype="$(grep DEVTYPE "${interface_path}/uevent" \
#                     | cut -d '=' -f 2)"
#                 status="$(cat "${interface_path}/carrier")" || true
#                 if [ "${devtype}" = 'wlan' ] \
#                     || [ "${devtype}"  = 'ethernet' ] \
#                     || [ "${devtype}"  = 'wwan' ] ; then
#                     if [ "${status}" -eq 1 ]; then
#                         # Display delimiter when no network is online.
#                         tmux set-environment -g has_network 1
#                         ip="$(ip addr show "${interface}" \
#                             | grep -E \
#                             'inet [1-9]{,3}\.[1-9]{,3}\.[1-9]{,3}\.[1-9]{,3}' \
#                             | awk '{print $2}' \
#                             | cut -d '/' -f 1 \
#                             )"
#                         if printf '%s' "${devtype}" | grep -q 'wlan'; then
#                             output="${ip} ${wifi_icon}"
#                         elif printf '%s' "${devtype}" | grep -q 'wwan'; then
#                             output="${ip} ${wifi_icon}"
#                         elif printf '%s' "${devtype}" | grep -q 'ethernet'; then
#                             output=${ip} "${ethernet_icon}"
#                         fi
#                     fi
#                 fi
#             fi
#         done
#         # Use xargs to strip whitespace.
#         printf '%s' "$(echo "${output}" | xargs)"
#     else
#         _network_stats_override
#     fi
# }
#
# "$@"

# TMUX Notes
# ----------
# 
# - https://github.com/tmux/tmux/wiki/Formats
# - https://github.com/tmux/tmux/wiki/Advanced-Use
# - https://github.com/rothgar/awesome-tmux
# 
# Commands:
# 
# - tmux lsp -F '#{session_id} #{window_id} #{pane_id}'
# 
